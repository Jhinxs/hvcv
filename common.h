#pragma once
#include <ntifs.h>
#include <ntddk.h>
#include <intrin.h>


#define X86_CR4_VMXE 0x2000  /* enable VMX */
#define MSR_IA32_FEATURE_CONTROL 		0x03a
#define MSR_IA32_VMX_BASIC              0x480
#define MSR_IA32_VMX_PINBASED_CTLS 0x481
#define MSR_IA32_VMX_PROCBASED_CTLS 0x482
#define MSR_IA32_VMX_SECPROCBASED_CTLS2 0X48B
#define MSR_IA32_VMX_EXIT_CTLS		0x483
#define MSR_IA32_VMX_ENTRY_CTLS		0x484
#define MSR_IA32_SYSENTER_CS 0X174
#define MSR_IA32_SYSENTER_ESP 0X175
#define MSR_IA32_SYSENTER_EIP 0X176
#define MSR_IA32_DEBUGCTL 0X1D9
#define MSR_IA32_EFER 0xc0000080
#define MSR_FS_BASE 0xc0000100                /* 64bit FS base */
#define MSR_GS_BASE 0xc0000101                /* 64bit GS base */

#define VMCS_PIN_BASE_CONTROL 0x4000
#define VMCS_PROCESSOR_BASE_CONTTOL 0x4002
#define VMCS_VM_EXIT_CONTROL 0x400C
#define VMCS_VM_ENTRY_CONTROL 0X4012

#define VM_EXIT_REASON  0x00004402
#define VMCS_INSTRUCTION_LENGH 0X440C
#define VMCS_EXIT_QUALIFICTION 0X6400
#define VM_ENTRY_MSR_LOAD_COUNT  0x00004014
#define VM_ENTRY_INTR_INFO_FIELD 0x00004016
#define VM_ENTRY_INTR_INFO  0x00004016
#define VM_ENTRY_EXCEPTION_ERROR_CODE  0x00004018
#define VM_ENTRY_INSTRUCTION_LEN  0x0000401a
#define VM_EXIT_INTR_INFO  0x00004404
#define VM_EXIT_INTR_ERROR_CODE  0x00004406

#define VM_INSTRUCTION_ERROR  0x4400
#define GUEST_PHYSICAL_ADDRESS  0x00002400
#define GUEST_PHYSICAL_ADDRESS_HIGH 0x00002401
#define GUEST_LINEAR_ADDRESS  0x0000640a


#define VMCS_HOSTAREA_CR0 0x6C00
#define VMCS_HOSTAREA_CR3 0x6C02
#define VMCS_HOSTAREA_CR4 0x6C04
#define VMCS_HOSTAREA_RSP 0X6C14
#define VMCS_HOSTAREA_RIP 0X6C16
#define VMCS_HOSTAREA_CS 0XC02
#define VMCS_HOSTAREA_SS 0XC04
#define VMCS_HOSTAREA_DS 0XC06
#define VMCS_HOSTAREA_ES 0XC00
#define VMCS_HOSTAREA_FS 0XC08
#define VMCS_HOSTAREA_GS 0XC0A
#define VMCS_HOSTAREA_TR 0XC0C
#define VMCS_HOSTAREA_FS_BASE 0X6C06
#define VMCS_HOSTAREA_GS_BASE 0X6C08
#define VMCS_HOSTAREA_TR_BASE 0X6C0A
#define VMCS_HOSTAREA_GDTR_BASE 0X6C0C
#define VMCS_HOSTAREA_IDTR_BASE 0X6C0E
#define VMCS_HOSTAREA_SYSENTER_CS 0X4C00
#define VMCS_HOSTAREA_SYSENTER_ESP 0X6C10
#define VMCS_HOSTAREA_SYSENTER_EIP 0X6C12
#define VMCS_HOSTAREA_IA32_EFER  0x00002c02

#define VMCS_GUSTAREA_CR0 0X6800
#define VMCS_GUSTAREA_CR3 0X6802
#define VMCS_GUSTAREA_CR4 0X6804

#define VMCS_GUSTAREA_CS_BASE 0x6808
#define VMCS_GUSTAREA_SS_BASE 0x680A
#define VMCS_GUSTAREA_DS_BASE 0X680C
#define VMCS_GUSTAREA_ES_BASE 0X6806
#define VMCS_GUSTAREA_FS_BASE 0x680E
#define VMCS_GUSTAREA_GS_BASE 0x6810
#define VMCS_GUSTAREA_LDTR_BASE 0x6812
#define VMCS_GUSTAREA_TR_BASE 0x6814
#define VMCS_GUSTAREA_GDTR_BASE 0x6816
#define VMCS_GUSTAREA_IDTR_BASE 0x6818

#define VMCS_GUSTAREA_CS 0X802
#define VMCS_GUSTAREA_SS 0X804
#define VMCS_GUSTAREA_DS 0X806
#define VMCS_GUSTAREA_ES 0X800
#define VMCS_GUSTAREA_FS 0X808
#define VMCS_GUSTAREA_GS 0X80A
#define VMCS_GUSTAREA_LDTR 0X80C
#define VMCS_GUSTAREA_TR 0X80E

#define VMCS_GUSTAREA_CS_LIMT 0X4802
#define VMCS_GUSTAREA_SS_LIMT 0X4804
#define VMCS_GUSTAREA_DS_LIMT 0X4806
#define VMCS_GUSTAREA_ES_LIMT 0X4800
#define VMCS_GUSTAREA_FS_LIMT 0X4808
#define VMCS_GUSTAREA_GS_LIMT 0X480A
#define VMCS_GUSTAREA_LDTR_LIMT 0X480C
#define VMCS_GUSTAREA_TR_LIMT 0X480E
#define VMCS_GUSTAREA_GDTR_LIMT 0X4810
#define VMCS_GUSTAREA_IDTR_LIMT 0X4812
#define VMCS_GUSTAREA_IA32_EFER 0x2806

#define VMCS_GUSTAREA_DEBUGCTL_FULL 0X2802
#define VMCS_GUSTAREA_DEBUGCTL_HIGH 0X2803

#define VMCS_GUSTAREA_DR7 0X681A
#define VMCS_GUSTAREA_RSP 0X681C
#define VMCS_GUSTAREA_RIP 0X681E
#define VMCS_GUSTAREA_RFLAGS 0X6820
#define VMCS_GUSTAREA_SYSENTER_ESP 0X6824
#define VMCS_GUSTAREA_SYSENTER_EIP 0X6826
#define VMCS_GUSTAREA_SYSENTER_CS 0X482A

#define VMCS_GUSTAREA_CS_ACCR 0X4816
#define VMCS_GUSTAREA_SS_ACCR 0X4818
#define VMCS_GUSTAREA_DS_ACCR 0X481A
#define VMCS_GUSTAREA_ES_ACCR 0X4814
#define VMCS_GUSTAREA_FS_ACCR 0X481C
#define VMCS_GUSTAREA_GS_ACCR 0X481E
#define VMCS_GUSTAREA_LDTR_ACCR 0X4820
#define VMCS_GUSTAREA_TR_ACCR 0X4822

#define VMCS_GUSTAREA_LINKPOINT_FULL 0X2800
#define VMCS_GUSTAREA_LINKPOINT_HIGH 0X2801
#define VMCS_GUSTAREA_INTERRUPTIBILITY_INFO  0x00004824
#define VMCS_GUSTAREA_ACTIVITY_STATE  0X00004826

#define VM_ENTRY_LOAD_IA32_EFER         0x00008000
#define VM_ENTRY_IA32E_MODE             0x00000200
#define VM_EXIT_IA32E_MODE              0x00000200
#define VM_EXIT_LOAD_IA32_EFER          0x00200000
#define VM_EXIT_SAVE_DEBUG_CONTROLS     0x00000004
#define VM_EXIT_ACK_INTR_ON_EXIT        0x00008000
#define VM_EXIT_SAVE_IA32_EFER          0x00100000
#define VM_EXIT_MSR_STORE_COUNT         0x0000400e
#define VM_EXIT_MSR_LOAD_COUNT          0x00004010
#define VM_EXIT_INVPCID                 0x1000
#define VM_EXIT_ENABLE_RDTSCP           0x8
#define VM_EXIT_RDTSC_EXIT              0x1000
#define VM_EXIT_XSAVE_OR_XSTORS         0x100000
#define VM_SECONDARY_EXEC_ENABLE_EPT    0x00000002
#define VM_SECONDARY_EXEC_ENABLE_VPID   0x00000020
#define MSR_IA32_VMX_EPT_VPID_CAP       0x48c

#define GUEST_RSP 0x0000681c
#define GUEST_RIP 0x0000681e

#define TSC_OFFSET  0x00002010
#define TSC_OFFSET_HIGH  0x00002011
#define PAGE_FAULT_ERROR_CODE_MASK  0x00004006
#define PAGE_FAULT_ERROR_CODE_MATCH  0x00004008
#define IO_BITMAP_A  0x00002000
#define IO_BITMAP_A_HIGH  0x00002001
#define IO_BITMAP_B  0x00002002
#define IO_BITMAP_B_HIGH  0x00002003
#define MSR_BITMAP  0x00002004
#define MSR_BITMAP_HIGH  0x00002005
#define EXCEPTION_BITMAP  0x00004004
#define EPT_POINTER  0x0000201a
#define VIRTUAL_PROCESSOR_ID  0x00000000
#define MSR_IA32_MTRR_DEF_TYPE			0x2ff
#define MSR_IA32_MTRR_CAPABILITIES      0x000000FE
#define MSR_IA32_MTRR_PHYSBASE0         0x00000200
#define MSR_IA32_MTRR_PHYSMASK0         0x00000201

#define MEMORY_TYPE_UNCACHEABLE                                      0x00000000
#define MEMORY_TYPE_WRITE_COMBINING                                  0x00000001
#define MEMORY_TYPE_WRITE_THROUGH                                    0x00000004
#define MEMORY_TYPE_WRITE_PROTECTED                                  0x00000005
#define MEMORY_TYPE_WRITE_BACK                                       0x00000006
#define MEMORY_TYPE_INVALID                                          0x000000FF

#define CPU_BASED_ACTIVATE_SECONDARY_CONTROLS   0x80000000
#define CPU_BASED_ACTIVATE_MSR_BITMAP         0x10000000
#define SECONDARY_VM_EXEC_CONTROL  0x0000401e
#define CR0_GUEST_HOST_MASK  0x00006000
#define CR4_GUEST_HOST_MASK  0x00006002
#define CR0_READ_SHADOW  0x00006004
#define CR4_READ_SHADOW  0x00006006

#define X86_CR0_PG              0x80000000
#define CR3_TARGET_COUNT  0x0000400a
#define CR3_TARGET_VALUE0  0x00006008
#define CR3_TARGET_VALUE1  0x0000600a
#define CR3_TARGET_VALUE2  0x0000600c
#define CR3_TARGET_VALUE3  0x0000600e

#define VMM_STACK_SIZE 0X8000


#define VPIDTAG	0x1

typedef struct _VMX_CPU
{
    PVOID VMXON_Region;
    PHYSICAL_ADDRESS VMXONRegion_PA;
    PVOID VMXCS_Region;
    PHYSICAL_ADDRESS VMCSRegion_PA;
    PVOID VMhost_Stack;
    BOOLEAN isstartvt;
    BOOLEAN isstopvt;
    BOOLEAN InitEPT;
    ULONG64 MsrBitMapVirAddress;
    ULONG64 MsrBitMapPhyAddress;
    ULONG64 vmxoff_GuestRip;
    ULONG64 vmxoff_GuestRsp;
    PVOID  Splitbuffer;
    BOOLEAN NeedIncRip;

}VMX_CPU, *PVMX_CPU;

typedef struct _GUEST_REGS
{
    ULONG64 rax;
    ULONG64 rcx;
    ULONG64 rdx;
    ULONG64 rbx;
    ULONG64 rsp;
    ULONG64 rbp;
    ULONG64 rsi;
    ULONG64 rdi;
    ULONG64 r8;
    ULONG64 r9;
    ULONG64 r10;
    ULONG64 r11;
    ULONG64 r12;
    ULONG64 r13;
    ULONG64 r14;
    ULONG64 r15;
} GUEST_REGS, * PGUEST_REGS;

BOOLEAN CVStartVT();
VOID CVStopVT();


EXTERN_C get_cpuid_info(DWORD64); 
EXTERN_C set_cr4(DWORD64);
EXTERN_C VMXSaveRegState();
EXTERN_C VMXRestoreRegState();
EXTERN_C vmx_vmmhostentry();
EXTERN_C ULONG64 vmx_GetGdtBase();
EXTERN_C ULONG64 vmx_GetIdtBase();
EXTERN_C ULONG vmx_GetGdtLimit();
EXTERN_C ULONG vmx_GetIdtLimit();
EXTERN_C ULONG64 vmx_GetLdtr();
EXTERN_C ULONG64 vmx_vmread();
EXTERN_C ULONG64 readcs();
EXTERN_C ULONG64 readds();
EXTERN_C ULONG64 reades();
EXTERN_C ULONG64 readfs();
EXTERN_C ULONG64 readgs();
EXTERN_C ULONG64 readtr();
EXTERN_C ULONG64 readss();
EXTERN_C vmx_invd();
EXTERN_C vmx_wrmsr();
EXTERN_C vmx_on(DWORD64);
EXTERN_C vmxcs_clear(DWORD64);
EXTERN_C vmx_vmcall(DWORD64);
EXTERN_C clear_cr4(DWORD64);
EXTERN_C vmx_invept(ULONG64,ULONG64);
EXTERN_C vmx_invvpid(ULONG64, ULONG64);
ULONG64 AdjustControlBit(ULONG64 uRetVaule, ULONG64 msr);
EXTERN_C VOID HandleExitRIP();

#define DbgPrintLog(format,...) \
        DbgPrintEx(0,0,"Cvhv LOG: (%s,%d) | " format, __FUNCTION__,__LINE__,__VA_ARGS__);

