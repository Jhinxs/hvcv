	PEPT_FAKE_PAGE Fake_Page_Entry = MallocFakePageFromPagePoolList();
	if (!Fake_Page_Entry)
	{
		DbgPrintLog("[!] Error: Failed to Allocate Pool For Fake Page\n");
		return FALSE;
	}
	Fake_Page_Entry->OriginalEntry = *TargetPage;
	Fake_Page_Entry->OriginalEntryAddress = TargetPage;
	Fake_Page_Entry->VirtualAddress = HookFunc;
	Fake_Page_Entry->PhyAddr = phyaddress;
	Fake_Page_Entry->PhyPFN = phyaddress>>12;
	
	Fake_Page_Entry->FakeEntryForRW.all = 0;
	Fake_Page_Entry->FakeEntryForRW.Bits.read_access = 0;
	Fake_Page_Entry->FakeEntryForRW.Bits.write_access = 0;
	Fake_Page_Entry->FakeEntryForRW.Bits.exec_access_supervisor = 1;

	Fake_Page_Entry->FakeEntryForX.all = 0;
	Fake_Page_Entry->FakeEntryForX.Bits.read_access = 1;
	Fake_Page_Entry->FakeEntryForX.Bits.write_access = 1;
	Fake_Page_Entry->FakeEntryForX.Bits.exec_access_supervisor = 0;

	InsertHeadList(&pEptState->FakePageList, &Fake_Page_Entry->POOL_LIST);
	TargetPage->Bits.read_access = 0;
	TargetPage->Bits.write_access = 0;

    ///
         PEPT_FAKE_PAGE fake_page = GetFakePage(phy);
     if (fake_page ==NULL)
     {
         DbgPrintLog("[!] Error: Try To Fake Page For Hookitem Failed\n");
         return FALSE;
     }

     if (!PQ->ExecuteAble && PQ->Execute)
     {
         fake_page->OriginalEntryAddress->Bits.exec_access_supervisor = 1;
         InveptSingleContext(pEptState->EptPointer.all);
         DbgPrintLog("[+] Set hookpage PFN = %llx exec access to 1\n", hookpagepte->Bits.PhyPagePFN);
         return TRUE;
     }
     if (PQ->ExecuteAble && (!PQ->ReadAble|!PQ->WriteAble))
     {
         fake_page->OriginalEntryAddress->Bits.read_access = 1;
         fake_page->OriginalEntryAddress->Bits.write_access = 1;
         InveptSingleContext(pEptState->EptPointer.all);
         DbgPrintLog("[+] Set hookpage PFN = %llx read access to 1,write access to 1\n", hookpagepte->Bits.PhyPagePFN);
         return TRUE;
     }

     0x14

     0x0000000003ad2000